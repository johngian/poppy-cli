from typing import Any, Optional

class SimpleBase:
    Empty: Any = ...
    def __enter__(self): ...
    def __exit__(self, *exc_info: Any) -> None: ...
    channel: Any = ...
    producer: Any = ...
    consumer: Any = ...
    no_ack: Any = ...
    queue: Any = ...
    buffer: Any = ...
    def __init__(
        self, channel: Any, producer: Any, consumer: Any, no_ack: bool = ...
    ) -> None: ...
    def get(self, block: bool = ..., timeout: Optional[Any] = ...): ...
    def get_nowait(self): ...
    def put(
        self,
        message: Any,
        serializer: Optional[Any] = ...,
        headers: Optional[Any] = ...,
        compression: Optional[Any] = ...,
        routing_key: Optional[Any] = ...,
        **kwargs: Any
    ) -> None: ...
    def clear(self): ...
    def qsize(self): ...
    def close(self) -> None: ...
    def __len__(self): ...
    def __bool__(self): ...
    __nonzero__: Any = ...

class SimpleQueue(SimpleBase):
    no_ack: bool = ...
    queue_opts: Any = ...
    queue_args: Any = ...
    exchange_opts: Any = ...
    def __init__(
        self,
        channel: Any,
        name: Any,
        no_ack: Optional[Any] = ...,
        queue_opts: Optional[Any] = ...,
        queue_args: Optional[Any] = ...,
        exchange_opts: Optional[Any] = ...,
        serializer: Optional[Any] = ...,
        compression: Optional[Any] = ...,
        **kwargs: Any
    ) -> None: ...

class SimpleBuffer(SimpleQueue):
    no_ack: bool = ...
    queue_opts: Any = ...
    exchange_opts: Any = ...
